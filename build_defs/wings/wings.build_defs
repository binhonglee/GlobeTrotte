def wings_lib(name:str, src:str, outs:dict, config:str="", test_only=False, visibility:list=None, deps:list=[]):
  all_out_files = []

  filegroup(
    name = name + "_#wings",
    srcs = [src],
    visibility = visibility,
    binary = False,
    test_only = test_only,
  )

  cmd = " && ".join([
    _home_path(),
    "FILES=$(find \"$PWD\" -name *.wings -exec realpath --relative-to \"$PWD\" \{\} \;)",
    "$TOOL -c:" + config + " $FILES",
  ])

  for i in outs.keys():
    all_out_files.append(i + "/" + outs[i])

  gen_files = build_rule(
    name = name + "_#genFiles",
    srcs = [src],
    tools = [CONFIG.WINGS_TOOL],
    cmd = cmd,
    outs = all_out_files,
    deps = deps + [":" + name + "_#wings"],
    needs_transitive_deps = True,
    test_only = test_only,
    binary = False,
    visibility = visibility,
  )

  for i in outs.keys():
    out_filename = outs[i].split(".")

    build_rule(
      name = name + "_#" + out_filename[-1],
      srcs = [gen_files],
      cmd = "mv $PKG_DIR/" + i + "/" + outs[i] + " ./",
      outs = [outs[i]],
      visibility = visibility,
      binary = False,
      test_only = test_only,
      needs_transitive_deps = True,
    )

  return filegroup(
    name = name,
    srcs = [gen_files],
    deps = deps + [":" + name + "_#wings"],
    needs_transitive_deps = True,
    test_only = test_only,
    binary = False,
    visibility = visibility,
  )

def _home_path():
  return " ".join([
    "if [[ \"$OSTYPE\" == \"darwin\"* ]];",
    "then HOME=\"/Users/$USER\";",
    "elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]];",
    "then HOME=\"/home/$USER\";",
    "fi",
  ])

CONFIG.setdefault("WINGS_TOOL", "wings")
