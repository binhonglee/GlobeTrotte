def pnpm_install(name:str, srcs:list=[], deps:list=[]):
  filegroup(
    name = name + "_#pnpm_install",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = False,
  )

  return _exec_pnpm(
    name = name,
    cmd = " ".join([
      "install",
      "--no-color",
      "--reporter append-only",
      "--prefer-offline",
    ]),
    srcs = srcs,
    deps = deps,
    link = True,
    at_top_level = True,
    outs = ["node_modules"],
    visibility = ["PUBLIC"],
    tools=[CONFIG.PNPM_TOOL],
  )

def pnpm_build(
  name:str,
  srcs:list=[],
  deps:list=[],
  visibility:list=None,
  denullify_files:list=[],
):
  filegroup(
    name = name + "_#pnpm_build",
    srcs = srcs,
    visibility = visibility,
    binary = False,
    test_only = False,
  )

  return pnpm_build_script(
    name = name,
    srcs = srcs,
    deps = deps,
    visibility = visibility,
    cmd = "build",
    outs = ["dist"],
    test_only = False,
    at_top_level = False,
    denullify_files = denullify_files,
  )

def pnpm_build_script(
  name:str,
  cmd:str,
  srcs:list=[],
  deps:list=[],
  outs:list=[],
  outpath:str="",
  test_only:bool=False,
  visibility:list=None,
  nullify_outs:bool=False,
  denullify_files:list=[],
  at_top_level:bool=False,
):
  filegroup(
    name = name + "_#pnpm_build_script",
    srcs = srcs,
    visibility = visibility,
    binary = False,
    test_only = test_only,
  )

  for out in outs:
    cmd = " && ".join([
      cmd,
      "cp " + out + " " + _top_level_dir() + outpath,
    ])

  return _exec_pnpm(
    name = name,
    outs = outs,
    srcs = srcs,
    deps = deps,
    outpath = outpath,
    test_only = test_only,
    visibility = visibility,
    at_top_level = at_top_level,
    nullify_outs = nullify_outs,
    denullify_files = denullify_files,
    cmd = "run --no-color " + cmd,
    tools = [CONFIG.PNPM_TOOL],
  )

def pnpm_run(
  name:str,
  cmd:str,
  shell:str="/bin/sh",
  srcs:list=[],
  deps:list=[],
  at_top_level:bool=False,
  visibility:list=None,
  test_only:bool=False,
  denullify_files:list=[],
):
  filegroup(
    name = name + "_#pnpm_run",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = False,
  )

  cmd = "$TOOL run " + cmd

  if not at_top_level:
    cmd = " && ".join([
      _prep_gen_dir(),
      _denullifier(denullify_files) if len(denullify_files) > 0 else "echo \"No files to denullify.\"",
      cmd,
    ])

  cmds = f'{{ tee -a > "$OUT" << EOF\n#!{shell}\n{cmd}\nEOF\n}}'
  return build_rule(
    name = name,
    outs = [name + ".sh"],
    srcs = srcs,
    cmd = "touch $OUT && " + cmds,
    deps = deps,
    visibility = visibility,
    binary = True,
    test_only = test_only,
    tools = [CONFIG.PNPM_TOOL],
  )

def pnpm_test(
  name:str,
  cmd:str,
  out:str=None,
  coverage:str=None,
  srcs:list=[],
  deps:list=[],
  flaky:bool|int=0,
  priority:int=0,
  visibility:list=None,
  at_top_level:bool=False,
  requires_server:bool=False,
  denullify_files:list=[],
):
  filegroup(
    name = name + "_#pnpm_test",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = True,
  )

  cmd = _denullifier(denullify_files) + " && pnpm run --no-color " + cmd

  if requires_server:
    cmd = cmd + "$CMD"

  if out is not None:
    cmd = " && ".join([
      "rm -rf " + out,
      "mkdir -p " + out,
      cmd,
    ])

  if not at_top_level:
    cmd = " && ".join([
      _prep_gen_dir(),
      cmd,
    ])
  
  cmd = " && ".join([
    "sleep " + str(priority),
    _go_to_top_level(),
    cmd,
  ])

  if requires_server:
    cmd = " && ".join([
      _check_server_running(),
      cmd,
    ])

  outs = []
  test_outputs = []

  if out is not None:
    cmd = " && ".join([
      cmd,
      "cat " + out + "/* > $TMP_DIR/test.results",
    ])
    outs = ["test.results"]

  if coverage is not None:
    cmd = " && ".join([
      "rm -rf " + coverage,
      cmd,
      "cat " + coverage + "/* > $TMP_DIR/coverage.results",
    ])
    test_outputs = ["coverage.results"]

  return _exec_pnpm(
    name = name,
    srcs = srcs,
    outs = outs,
    deps = deps + [":" + name + "_#pnpm_test"],
    test = True,
    flaky = flaky,
    test_only = True,
    at_top_level = False,
    overwrite_cmd = True,
    visibility = visibility,
    cmd = cmd,
    test_outputs = test_outputs,
    tools = [CONFIG.PNPM_TOOL],
  )

def _exec_pnpm(
  name:str,
  cmd:str,
  srcs:list=[],
  outs:list=[],
  outpath:str="",
  deps:list=[],
  link:bool=False,
  test:bool=False,
  flaky:bool|int=0,
  test_only:bool=False,
  visibility:list=None,
  test_outputs:list=[],
  denullify_files:list=[],
  nullify_outs:bool=False,
  at_top_level:bool=False,
  overwrite_cmd:bool=False,
  tools:list=[CONFIG.PNPM_TOOL],
):
  filegroup(
    name = name + "_#exec_npm",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = test_only,
  )

  no_test_output = False if test and len(outs) > 0 else True

  if overwrite_cmd:
    cmd = " && ".join([_home_path(), cmd])
  else:
    cmd = " && ".join([
      _home_path(),
      # $TOOLS only works on build time but not test time so
      # this is the best workarond I can think of for now.
      tools[0] + " " + cmd,
    ])

    if len(denullify_files) > 0:
      cmd = _denullifier(denullify_files) + " && " + cmd

  new_outs = []

  if not overwrite_cmd:
    if at_top_level:
      cmd = " && ".join([_go_to_top_level(), cmd])
    else:
      cmd = " && ".join([
        "rm -rf node_modules",
        "ln -s " + _top_level_dir() + "node_modules ./",
        cmd
      ])

    move = "ln -s" if link else "cp -R"

    for out in outs:
      new_outs.append(out + ".null" if nullify_outs else out)

      moving = ""
      if at_top_level:
        moving = " ".join([move, out, "$TMP_DIR/" + out])
        if nullify_outs:
          moving += ".null"
      else:
        # moving = " ".join(
        #   [move, out, _top_level_dir() + outpath + out]
        # )
        if nullify_outs:
          moving = " ".join(["mv", out, out + ".null"])

      if len(moving) > 0:
        cmd = " && ".join([cmd, moving])

  if test:
    test_cmd = cmd
    cmd = ""
  else:
    test_cmd = ""

  return build_rule(
    name = name,
    cmd = cmd,
    outs = new_outs,
    srcs = srcs,
    deps = deps,
    test = test,
    tools = tools,
    flaky = flaky,
    test_cmd = test_cmd,
    test_only = test_only,
    test_outputs = test_outputs,
    visibility = visibility,
    no_test_output = no_test_output,
    binary = False,
    output_is_complete = False,
    needs_transitive_deps = True,
  )

def _check_server_running():
  return " ".join([
    "if [[ $(lsof -i:1234 | grep -v \"CLOSE_WAIT\") ]];",
    "then CMD=\"\";",
    "else CMD=\":plz\";",
    "fi",
  ])

def _home_path():
  return " ".join([
    "if [[ \"$OSTYPE\" == \"darwin\"* ]];",
    "then HOME=\"/Users/$USER\";",
    "elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]];",
    "then HOME=\"/home/$USER\";",
    "fi",
  ])

def _prep_gen_dir():
  return " && ".join([
    "cd "+ _top_level_dir() + "/plz-out/gen/",
    "rm -rf node_modules || echo \"Existing 'node_modules' not found.\"",
    "ln -s " + _top_level_dir() + "node_modules ./",
  ])

def _denullifier(denullify_files:list):
  cmd = ""
  for file in denullify_files:
    cmd = " && ".join([
      "if [ -f '" + file + ".null' ]; " +
      "then rm " + file + " || echo 'Old version of " + file + " not found. Skip removing it...'; " +
      "cp " + file + ".null " + file + "; fi",
      cmd,
    ])
  
  if len(cmd) > 4:
    return cmd[:-4]
  else:
    return "echo \"No files to denullify. Skipping...\""

def _go_to_top_level():
  return "cd " + _top_level_dir() + " || exit 1"

def _top_level_dir():
  return "$(pwd | awk -F'plz-out' '{print $1}')"

CONFIG.setdefault("PNPM_TOOL", "pnpm")
