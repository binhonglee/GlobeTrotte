def ava_test(
  name:str,
  test_srcs:list,
  srcs:list=[],
  deps:list=[],
  visibility:list=[],
):
  rules = []
  pre_build = " && ".join([
    _set_node_modules(),
  ])

  for src in test_srcs:
    rule_name = src[:-8]
    post_build = "mv .nyc_output " + rule_name + "/.nyc_output"

    on_test = build_rule(
      name = rule_name,
      srcs = [src],
      cmd = " ".join([
        pre_build,
        "&&",
        "($TOOL run test:ava:plz",
        "--",
        "--serial",
        "--concurrency=1",
        "$SRCS",
        ">",
        rule_name + "_raw.results",
        "||",
        "echo \"" + rule_name + " failed.\")",
        "&&",
        post_build,
      ]),
      test_cmd = " | ".join([
        "cat " + rule_name + "_raw.results",
        "tee >(pnpx tap-xunit > test.results)",
      ]),
      outs = [rule_name + "_raw.results", rule_name + "/.nyc_output"],
      deps = srcs + deps,
      test = True,
      test_only = True,
      visibility = visibility,
      tools=[CONFIG.PNPM_TOOL],
    )

    rules += [on_test]

  cmd = " ".join([
    "for SRC in $(" + 
      " | ".join([
        "echo $SRCS",
        "tr ' ' '\\n'",
        "grep '.nyc_output'",
      ]) +
    ");",
    "do",
    "mv $SRC `mkdir -p " + name + "/" + "$(" +
      " | ".join([
        "echo $SRC",
        "awk -F'" + name + "/' '{print $2}'",
        "awk -F'/.nyc_output' '{print $1}'",
      ]) +
    ") && echo $_`;",
    "done;"
  ])

  return build_rule(
    name = name,
    srcs = rules + srcs,
    cmd = cmd,
    outs = [name],
    deps = deps,
    test_only = True,
    visibility = visibility,
  )

def pnpm_run_build(
  name:str,
  cmd:str,
  srcs:list,
  outs:list,
  make_copy:bool=False,
  copy_path:str="",
  deps:list=[],
  test_only:bool=False,
  visibility:list=[],
):
  cmd = _set_node_modules() + " && $TOOL run " + cmd

  if make_copy:
    cmd += " && cp $OUTS " + _top_level_dir() + copy_path
  return build_rule(
    name = name,
    srcs = srcs,
    outs = outs,
    cmd = cmd,
    deps = deps,
    test_only = test_only,
    visibility = visibility,
    tools=[CONFIG.PNPM_TOOL],
  )

def pnpm_install(name:str, srcs:list=[], deps:list=[]):
  filegroup(
    name = name + "_#pnpm_install",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = False,
  )

  out = "node_modules"

  cmd = " ".join([
    "$TOOL",
    "install",
    "--no-color",
    "--reporter append-only",
    "--prefer-offline",
  ])

  cmd = " && ".join([
    _home_path(),
    _go_to_top_level(),
    cmd,
    "ln -s " + out + " $TMP_DIR/node_modules",
  ])

  return build_rule(
    name = name,
    cmd = cmd,
    srcs = srcs,
    deps = deps,
    outs = [out],
    visibility = ["PUBLIC"],
    tools=[CONFIG.PNPM_TOOL],
  )

def pnpm_run(
  name:str,
  cmd:str,
  shell:str="/bin/sh",
  srcs:list=[],
  deps:list=[],
  visibility:list=None,
  test_only:bool=False,
):
  filegroup(
    name = name + "_#pnpm_run",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = False,
  )

  cmd = "$TOOL run " + cmd

  cmds = f'{{ tee -a > "$OUT" << EOF\n#!{shell}\n{cmd}\nEOF\n}}'
  return build_rule(
    name = name,
    outs = [name + ".sh"],
    srcs = srcs,
    cmd = "touch $OUT && " + cmds,
    deps = deps,
    visibility = visibility,
    binary = True,
    test_only = test_only,
    tools = [CONFIG.PNPM_TOOL],
  )

def pnpm_test(
  name:str,
  cmd:str,
  srcs:list=[],
  outs:list=[],
  deps:list=[],
  link:bool=False,
  set_home:bool=False,
  result_dir:str=None,
  result_file:str=None,
  visibility:list=None,
  requires_server:int=None,
):
  filegroup(
    name = name + "_#pnpm_test",
    srcs = srcs,
    visibility = ["PUBLIC"],
    binary = False,
    test_only = True,
  )

  cmd = "(pnpm run " + cmd
  if requires_server is not None:
    cmd = cmd + "$CMD"
  cmd = cmd + " || echo \"Test failed.\")"

  for out in outs:
    cmd = " && ".join([
      "rm -rf " + out,
      "mkdir -p " + out,
      cmd,
    ])

  if set_home:
    cmd = " && ".join([
      _home_path(),
      cmd,
    ])

  if requires_server is not None:
    cmd = " && ".join([
      _check_server_running(requires_server),
      cmd,
    ])

  if result_dir is not None:
    cmd = " && ".join([
      "rm -rf " + result_dir,
      "mkdir -p " + result_dir,
      cmd,
      "cat " + result_dir + "/* > $TMP_DIR/test.results",
    ])
    
  if result_file is not None:
    cmd = " && ".join([
      "rm " + result_file,
      cmd,
      "cat " + result_file + " > $TMP_DIR/test.results",
    ])

  cmd = " && ".join([
    _go_to_top_level(),
    cmd,
  ])

  move = "ln -s" if link else "cp -R"
  for out in outs:
    cmd = " && ".join([
      cmd,
      " ".join([move, out, "$TMP_DIR/" + out]),
    ])

  return build_rule(
    name = name,
    srcs = srcs,
    outs = outs,
    deps = deps,
    test = True,
    test_cmd = cmd,
    test_only = True,
    visibility = visibility,
    tools=[CONFIG.PNPM_TOOL],
    no_test_output = (result_dir == None and result_file == None),
  )

def _check_server_running(requires_server:int):
  return " ".join([
    "if [[ $(lsof -i:" + str(requires_server) + " | grep -v \"CLOSE_WAIT\") ]];",
    "then CMD=\"\";",
    "else CMD=\":plz\";",
    "fi",
  ])

def _home_path():
  return " ".join([
    "if [[ \"$OSTYPE\" == \"darwin\"* ]];",
    "then HOME=\"/Users/$USER\";",
    "elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]];",
    "then HOME=\"/home/$USER\";",
    "fi",
  ])

def _set_node_modules():
  return " &&  ".join([
    "rm -rf node_modules || echo \"Existing 'node_modules' not found.\"",
    "ln -s " + _top_level_dir() + "node_modules ./",
  ])

def _go_to_top_level():
  return "cd " + _top_level_dir() + " || exit 1"

def _top_level_dir():
  return "$(pwd | awk -F'plz-out' '{print $1}')"

CONFIG.setdefault("PNPM_TOOL", "pnpm")
