def ava_dir(
  name:str,
  srcs:list=[],
  deps:list=[],
  visibility:list=[],
):
  return build_rule(
    name = name,
    srcs = srcs,
    cmd = "zip -r " + name + ".ava_dir ./",
    outs = [name + ".ava_dir"],
    deps = deps,
    test_only = True,
    visibility = visibility
  )

def ava_tests(
  name:str,
  srcs:list,
  nyc:bool=True,
  ava_dirs:list=[],
  deps:list=[],
  visibility:list=[],
):
  rules = []
  pre_build = " && ".join([
    _set_node_modules(),
  ])
  for ava_dir in ava_dirs:
    ava_dir_name = ava_dir.split(":")
    if len(name) < 2:
      temp = ava_dir.split("/")
      ava_dir_name = temp[len(temp) - 1]
    else:
      ava_dir_name = ava_dir_name[1]
    pre_build += " && unzip -o " + ava_dir_name + ".ava_dir"

  for src in srcs:
    filename = src[:-8]
    rule_name = f'_{name}#{filename}'
    on_test = ava_test(
      name = rule_name,
      src = src,
      pre_build = pre_build,
      nyc = nyc,
      deps = deps + ava_dirs,
      visibility = visibility,
    )
    rules += [on_test]

  return build_rule(
    name = f"_{name}#test",
    srcs = srcs,
    deps = rules,
    test_only = True,
    visibility = visibility,
  )

def ava_test(
  name:str,
  src:str,
  ava_dirs:list=[],
  pre_build:str=None,
  nyc:bool=True,
  deps:list=[],
  visibility:list=[],
):
  use_nyc = "nyc --silent " if nyc else ""
  if pre_build is None:
    pre_build = " && ".join([
      _set_node_modules(),
    ])
    for ava_dir in ava_dirs:
      ava_dir_name = ava_dir.split(":")
      if len(name) < 2:
        temp = ava_dir.split("/")
        ava_dir_name = temp[len(temp) - 1]
      else:
        ava_dir_name = ava_dir_name[1]
      pre_build += " && unzip -o " + ava_dir_name + ".ava_dir"

  return build_rule(
    name = name,
    data = [src] + ava_dirs + deps,
    test_cmd = " ".join([
      pre_build,
      "&&",
      "$TOOL " + use_nyc + "ava",
      "--",
      "--serial",
      "--concurrency=1",
      "$PKG_DIR/" + src,
      "|",
      "tee",
      ">($TOOL tap-xunit > test.results)",
      "&&",
      "mkdir -p",
      name,
      "&&",
      "mv .nyc_output",
      name + "/.nyc_output",
    ]),
    test_outputs = [name + "/.nyc_output"],
    test = True,
    test_only = True,
    visibility = visibility,
    test_tools = [CONFIG.NPX_TOOL],
  )

def npm_run_build(
  name:str,
  cmd:str,
  srcs:list,
  outs:list,
  make_copy:bool=False,
  copy_path:str="",
  deps:list=[],
  test_only:bool=False,
  visibility:list=[],
):
  cmd = _set_node_modules() + " && $TOOL run " + cmd

  if make_copy:
    cmd += " && cp $OUTS " + _top_level_dir() + copy_path
  return build_rule(
    name = name,
    srcs = srcs,
    outs = outs,
    cmd = cmd,
    deps = deps,
    test_only = test_only,
    visibility = visibility,
    tools=[CONFIG.NPM_TOOL],
  )

def ts_run_build(
  name:str,
  script:str,
  srcs:list=[],
  outs:list=[],
  make_copy:bool=False,
  copy_path:str="",
  deps:list=[],
  test_only:bool=False,
  visibility:list=[],
):
  cmd = _set_node_modules() + " && " + _gen_run_typescript(script)
  if make_copy:
      cmd += " && cp $OUTS " + _top_level_dir() + copy_path
  
  return build_rule(
    name = name,
    srcs = srcs +  [script],
    cmd = cmd,
    outs = outs,
    deps = deps,
    test_only = test_only,
    visibility = visibility,
  )

def npm_install(name:str, srcs:list=[], deps:list=[]):
  out = "node_modules"

  cmd = " ".join([
    "$TOOL",
    "install",
    "--no-color",
    "--reporter append-only",
    "--prefer-offline",
  ])

  cmd = " && ".join([
    _home_path(),
    _go_to_top_level(),
    cmd,
    "ln -s " + out + " $TMP_DIR/node_modules",
  ])

  return build_rule(
    name = name,
    cmd = cmd,
    srcs = srcs,
    deps = deps,
    outs = [out],
    visibility = ["PUBLIC"],
    tools=[CONFIG.NPM_TOOL],
  )

def npm_run(
  name:str,
  cmd:str,
  shell:str="/bin/sh",
  srcs:list=[],
  deps:list=[],
  visibility:list=None,
  test_only:bool=False,
):
  cmd = "$TOOL run " + cmd
  cmds = f'{{ tee -a > "$OUT" << EOF\n#!{shell}\n{cmd}\nEOF\n}}'
  return build_rule(
    name = name,
    outs = [name + ".sh"],
    srcs = srcs,
    cmd = "touch $OUT && " + cmds,
    deps = deps,
    visibility = visibility,
    binary = True,
    test_only = test_only,
    tools = [CONFIG.NPM_TOOL],
  )

def ts_run(
  name:str,
  script:str,
  shell:str="/bin/sh",
  srcs:list=[],
  deps:list=[],
  post_run:list=[],
  visibility:list=None,
  test_only:bool=False,
):
  cmd = " && ".join([_gen_run_typescript(script)] + post_run)
  cmd = f'{{ tee -a > "$OUT" << EOF\n#!{shell}\n{cmd}\nEOF\n}}'
  return build_rule(
    name = name,
    outs = [name + ".sh"],
    srcs = srcs,
    cmd = "touch $OUT && " + cmd,
    deps = deps,
    visibility = visibility,
    binary = True,
    test_only = test_only,
  )

def npm_test(
  name:str,
  cmd:str,
  srcs:list=[],
  outs:list=[],
  deps:list=[],
  link:bool=False,
  set_home:bool=False,
  result_dir:str=None,
  result_file:str=None,
  visibility:list=None,
  requires_server:int=None,
  needs_transitive_deps:bool=False,
):
  cmd = "(" + CONFIG.NPM_TOOL + " run " + cmd
  if requires_server is not None:
    cmd += "$CMD"
  if result_dir is not None or result_file is not None:
    cmd += " || echo \"Test failed.\""
  cmd += ")"
  for out in outs:
    cmd = " && ".join([
      "rm -rf " + out,
      "mkdir -p " + out,
      cmd,
    ])

  if set_home:
    cmd = " && ".join([
      _home_path(),
      cmd,
    ])

  if requires_server is not None:
    cmd = " && ".join([
      _check_server_running(requires_server),
      cmd,
    ])

  if result_dir is not None:
    cmd = " && ".join([
      "rm -rf " + result_dir,
      "mkdir -p " + result_dir,
      cmd,
      "cat " + result_dir + "/* > $TMP_DIR/test.results",
    ])
    
  if result_file is not None:
    cmd = " && ".join([
      "rm " + result_file,
      cmd,
      "cat " + result_file + " > $TMP_DIR/test.results",
    ])

  cmd = " && ".join([
    _go_to_top_level(),
    cmd,
  ])

  move = "ln -s" if link else "cp -R"
  for out in outs:
    cmd = " && ".join([
      cmd,
      " ".join([move, out, "$TMP_DIR/" + out]),
    ])

  return build_rule(
    name = f"_{name}#test",
    srcs = srcs,
    outs = outs,
    deps = deps,
    test = True,
    test_cmd = cmd,
    test_only = True,
    visibility = visibility,
    no_test_output = (result_dir == None and result_file == None),
    needs_transitive_deps = needs_transitive_deps,
  )

def _gen_run_typescript(script_name:str):
  out_name = script_name[:-3] + ".js"
  return " ".join([
    CONFIG.NPX_TOOL,
    CONFIG.TYPESCRIPT_TOOL,
    "./$PKG_DIR/" + script_name,
    "--outDir",
    CONFIG.TYPESCRIPT_OUT_DIR,
    "&&",
    CONFIG.NODE_TOOL,
    CONFIG.TYPESCRIPT_OUT_DIR + "/" + out_name,
    "\\\$*",
  ])

def _check_server_running(requires_server:int):
  return " ".join([
    "if [[ $(lsof -i:" + str(requires_server) + " | grep -v \"CLOSE_WAIT\") ]];",
    "then CMD=\"\";",
    "else CMD=\":plz\";",
    "fi",
  ])

def _home_path():
  return " ".join([
    "if [[ \"$OSTYPE\" == \"darwin\"* ]];",
    "then HOME=\"/Users/$USER\";",
    "elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]];",
    "then HOME=\"/home/$USER\";",
    "fi",
  ])

def _set_node_modules():
  return " &&  ".join([
    "rm -rf node_modules || echo \"Existing 'node_modules' not found.\"",
    "ln -s " + _top_level_dir() + "node_modules ./",
  ])

def _go_to_top_level():
  return "cd " + _top_level_dir() + " || exit 1"

def _top_level_dir():
  return "$(pwd | awk -F'plz-out' '{print $1}')"

CONFIG.setdefault("NPM_TOOL", "npm")
CONFIG.setdefault("NPX_TOOL", "npx")
CONFIG.setdefault("NODE_TOOL", "node")
CONFIG.setdefault("TYPESCRIPT_TOOL", "tsc")
CONFIG.setdefault("TYPESCRIPT_OUT_DIR", "./plz-out/tsc")
