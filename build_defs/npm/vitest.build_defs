subinclude("//build_defs/npm")

def vitest_dir(
  name:str,
  srcs:list=[],
  config:str=None,
  deps:list=[],
  visibility:list=[],
):
  cmd = "zip -r " + name + ".vitest_dir ./"
  if config is not None:
    cmd = " && ".join([
      "rm vite.config.ts",
      "mv " + config + " vite.config.ts",
      cmd,
    ])

  return build_rule(
    name = name,
    srcs = srcs + [config],
    cmd = cmd,
    outs = [name + ".vitest_dir"],
    deps = deps,
    test_only = True,
    visibility = visibility
  )

def vitest_tests(
  name:str,
  srcs:list=[],
  vitest_dirs:list=[],
  deps:list=[],
  visibility:list=[],
):
  test_rules = []

  for src in srcs:
    test = vitest_test(
      name = src[:-8].replace("/", "_"),
      src = src,
      vitest_dirs = vitest_dirs,
      deps = deps,
      visibility = visibility,
    )
    test_rules += [test]

  return build_rule(
    name = name,
    data = test_rules + srcs,
    test_cmd = "echo 'test'",
    test_only = True,
    visibility = visibility,
    requires = ["npm-test"],
  )

def vitest_test(
  name:str,
  src:str,
  vitest_dirs:list=[],
  deps:list=[],
  visibility:list=[],
):
  pre_build = _set_node_modules()
  for vitest_dir in vitest_dirs:
    vitest_dir_name = vitest_dir.split(":")
    if len(name) < 2:
      temp = vitest_dir.split("/")
      vitest_dir_name = temp[len(temp) - 1]
    else:
      vitest_dir_name = vitest_dir_name[1]
    pre_build += " && unzip -o " + vitest_dir_name + ".vitest_dir"

  out_dir = _vitest_out_dir(name)
  if CONFIG.CORE_FILES != "":
    deps += [CONFIG.CORE_FILES]

  return build_rule(
    name = name,
    data = [src] + vitest_dirs + deps,
    test_cmd = " && ".join([
      pre_build,
      " ".join([
        _get_npx_tool(),
        "vitest",
        "--coverage",
        "--threads=false",
        "--reporter=junit",
        "--run",
        "$PKG_DIR/" + src,
      ]),
      "cp vitest_junit test.results",
      "cp vitest_coverage/coverage-final.json test.coverage",
      "mkdir -p " + out_dir,
      "mv vitest_coverage/* " + out_dir,
    ]),
    test_outputs = [out_dir],
    test = True,
    test_only = True,
    visibility = visibility,
    labels = ['vitest'],
  )

def _vitest_out_dir(name: str):
  return name + "/.nyc_output"
